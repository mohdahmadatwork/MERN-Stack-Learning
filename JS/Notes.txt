Source {
    -- Book: Speaking With JavaScript
    -- Web: Mdn Reference
    --JS conference
    --Facebook conference
}
Class 1 (05/03/2023) {
    --JS Facts{
        --Js is a Scripting language
        --Scripting is small or light weight
        --JS is functional based programming language
        --JS is loosely type lang
        --Brenden Eich Built js in 10 days
        --Firstly called js as livescript
        --From 1995 livescript called as JavaScript
        --Official name of js today is ECMAScript
        --Every Browser has there JS engine which compile and run the JS on browser
        --Because every browser have different so js can behave differently in every device
        --JavaScript Borrowed from Scheme(General Purpose programming language), AWK(First Class Function),Self(Prot)
    } 
    --Data Type{
        --primitive / primary / Immutable / value data type {
            -1-number{
                --int,float,short,long all are numbers
                --this data type can contain 64 bit number
                --Success Value (0 to 9 , Decimal number)
                --Failure Value (Infinity , NaN) (number/0)
                --NaN (Not a Number)
                --number + string = string
                --number - string = Number
                --number + boolean = number
                --number + undefined = NaN
                --number + infinity = infinity
                --undefied + number = NaN
                --undefied + string = string
                --null + number = number
            }
            -2-bigint{
                --20000n is a bigint number 
                --bigint can be operated with bigint only
            }
            -3-string{
                --string interpolation (use ${a} inside string to dynamically render a inside string)
            }
            -4-boolean {
                --number + boolean = number
            }
            -5-null {
                --it is a Value
                --if address is not present the value is assigned null to an object only because object contains reference
                --typeof undefined (undefined)
                --typeof null (object) 
                --null == undefined (true , But == is a loose compairison , "==" it first convert easy prey to different thenn compare)
                --null === undefined (false, === is a strict compairision , First check the type then compare the value)
            }
            -6-symbol{
                --return unique
            }
            -7-undefined
        }
        --Non-Primitive / Secondary / Mutable / Referal Data Type {
            --Reference values that refer to objects.
            --JS engine allocate memory in Heap for this type of Data
            --Array {
                -- arr = [10,20,20];
                -- arr contains the reference of array [10,20,20]
                -- Array is indexible {
                    --pros {
                        --Can contain data in cotinuous manner
                    }
                    --cons {
                        --Humans are bad with remembering numbers
                    }
                }
            }
            --Object {
                --var o = {};
                --typeof o ; //object 
                --object is key value pair 
                --We can find the value through the key
                --We can access value through two syntax with square( [] ) bracket and Dot(.) operator {
                    var  temp = {delhi:11,hyd:12}
                    temp.delhi; // 11
                    temp["delhi"];
                    temp.hyd; // 12
                    temp["delhi"];
                }
                --difference b/w Dot( . ) operator and square ( [] ) operator {
                    --you can not access those key which are number or string containing special char like space
                    --through square bracket you can only access string keys which have no spaces
                    --example{
                        var ahmad = {name:"Mohd Ahmad",study:"Btech",12:65,"perm add":"Delhi"};
                        console.log (ahmad.name);
                        console.log(ahmad[name]);
                        console.log(ahmad.12);
                        console.log(ahmad[12]);
                        console.log(ahmad.perm add);
                        console.log(ahmad["perm add"]);
                    }
                }
            }
        }
    }
    --Type Cast{-
        --parseInt()
        --parseFloat()
    }
    --Loose Comparison(==){
        -- First convert 
        -- then compare the value
        -- example {
            --10 == "10"  
            --return true 
            --because first == it convert to 10 (number) to string then compare with "10" (string)
        }  
    }
    --Strict Comparison (===){
        -- First type check 
        -- then compare the value
        -- example {
            --10 == "10"  
            --return false 
            --because first === it checks the type of 10 that is number  and "10" that is string so it type checks and get different so it exits without checking value and gives false
        }
    }
}

Class 2 (06/03/2023) {
    --Recap {
        --Dynamic 
    }
    --Immutability{
        --original never change
        --if you change in copy no chanages in original value
        --primitive data types are immutable
        --example {
            var a = 10;
            var b = a;
            console.log(b);
            console.log(a);
            b++;
            console.log(b);
            console.log(a);
        }
        --Referance data type are mutable 
        --example {
            var arr = [1,2,3];
            var arr2 = arr;
            console.log(arr==arr2);//true
            console.log(arr===arr2);//true
            arr2[0]=10;
            console.log(arr);
            console.log(arr2);
        }
        --for making Referance data type immutable we can clone the object in a new memory
        --example{
            var arr3 = [...arr]; // "..." is called spread operator
            arr2[0]=10;
            console.log(arr);
            console.log(arr2);
            arr3[0]=100;
            console.log(arr3);
            console.log(arr==arr3);//false
            console.log(arr===arr3);//false
        }
        --primitive are not object, they have pure values. It doesn't attacch any methods.
        --Due to wrapper objects. you can access methods through premitive data types because primitive data type change to wrapper objects then call methods then it become normal.
    }
    --Loop vs Iterator{
        --Loop{
            --When iterator is known
            --for(var i=0;i<arr.length;i++);
        }
        --Iterator{
            --When we don't know the number of iteration we use iterator 
            --for(var element of arr){ // Traverse arr this is a for of loop can not iterate over object
                console.log(arr[i]);
            } 
            --for (let key in ahmad){ //traverse object this is a for in loop used to traverse over key value pair so it can also iterate over array where key is index
                console.log(key,ahmad[key])
            }
        }
    }
}

Class 3 (11/03/2023){
    --Garbage collector run when there is no important work like i/O Operation. 
    --i/o Operation does not use cpu
    --arr = [10,"Ahmad",true,[100,200],88n] (array is a colection of values, not same values, values can be different)
    --object have behaviors that's why arr is an object according to typrof operator
    --Can you null any type of variable ? if you can what are the casualities?
    --does null and udefined are same ?
    --10 == "10" gives true does they are same ?
    --
}

Class 4 (12/03/2023){
    --VM {
        --VM: Virtual Machine
        --JavaScript is a compiled as well as Interpreted language
        --JS do in Memory Compilation while others do in disk compilation
        --VM interpret the compile code 
        --To see this {
            example {
                disp();
                function disp(){
                    console.log("I am the Disp");
                }
                //This code works because of function Hoisting
            }
            example{
                function output(){
                    console.log("I is ",i);
                    for(var i =1;i<=10;i++){
                        console.log("I is ",i);
                    }
                    console.log("I is ",i);
                }
                this function works because of Variable Hoisting
            }
            --Hoisting (After compilation the function desc goes to top and calling comes after that so the code works)
        }
    }
    --Hoisting{
        --After compilation the function desc or variable declarartion goes to top and calling or initialization comes after that so the code works this is called hoisting
        --If you write var in function it will going to be Functional Hoisting if if you erite var outside function it will be global Hoisting
    }
    --TDZ {
        --Tempral Dead Zone
    }
    --accidental global variable{
        --name = "mohd ahmad"; (accidental global variable)
        --'use strict' (used to tell js that don't use accidental global variable)
    }
    --var{
        --var looks like var can define more than once but actually because of Hoisting var defines once in the function others are just assignment 
    }
    --let{
        --It do the Block Level Hoist
        --It do the hoisting but it can not access before initialization when it initialized  the above zone or zone before initialization is called TDZ.
        --You can write let a and every time it will actually initialize a but when you write var a yhen because of hoisting the declaration will go to the top of the function so that everytime you write var a = 10; it will not declare a again instead the new value will assign to a.
        --Previous value of let a will be intact after the scope of second declaration of a while in var if you write var a again you will loose the previous value.  
    }
    --window{
        --Window is the main or global object 
        --Every Global variable attach with window object
        --window == this // true
        -- var i = "Mohd Ahmad";
        -- we can access i also like this window.i;
    }
    --functions{
        --when function returns nothing it returns undefined
        --syntax{
            function show(){
                //body
            }
        }
    }
}

Class 6 (19/03/2023){
    --base 64 images
    --Open Close Principle
    --Functional programming{
        --Facts{
            --programming paradigm
            --based on declarative programming rather than imperative
            --purely functions based
        }
         --functions disp(t,y){
                var a =10;
                a = a + t +y;
                console.log("Ahmad");
                return "hello "+a;
        }
        --Drawback{
            --when we define named function it becomes global and attached with window object
        }
        --Function {
            --named function{
                syntax {
                    --functions disp(){
                        console.log("Ahmad");
                        return hello;
                    }
                }
            }
            --unnamed function/Anonymous/Function Expression{
                --When we use event handelling we use unnamed function
                --example{
                    var add = fcunction(){
                        //Function Body
                    }
                }
                --example{
                    function calc(){
                        var add = function(x,y){
                            return x+y;
                        }
                        var subtract = function(x,y){
                            return x-y;
                        }
                        //return add,subtract; only last element will going to return;
                        //return [add,subtract]; 
                        return {"addition":add,"subtraction":subtract};
                    }
                }
            }
            --Named Function Expression(NFE){
                function calc(){
                        var add = function add(x,y){
                            return x+y;
                        }
                        var subtract = function sub(x,y){
                            return x-y;
                        }
                        //return add,subtract; only last element will going to return;
                        return [add,subtract]; 
                        //return {"addition":add,"subtraction":subtract};
                    }
            }
        }
    }
}